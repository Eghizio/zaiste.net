#+title: Languages

* Programming Languages
** Mainstream

+ C++
+ C#
+ Java
+ [[file:javascript.org][JavaScript]] is a high-level, interpreted or just-in-time compiled programming
  language. It has curly-bracket syntax, dynamic typing, prototype-based
  object-orientation and first-class functions.
+ [[file:python.org][Python]]
+ [[file:typescript.org][TypeScript]]
+ PHP
+ Go

** Emerging

+ [[file:clojure.org][Clojure]]
+ [[file:clojurescript.org][ClojureScript]]
+ [[file:commonlisp.org][Common Lisp]]
+ [[file:dart.org][Dart]]
+ [[file:elixir.org][Elixir]] ([[https://github.com/elixir-lang/elixir][GitHub]]) is a dynamic, functional language designed for building scalable and
  maintainable applications. It leverages the Erlang VM, known for running
  low-latency, distributed and fault-tolerant systems, while also being
  successfully used in web development and the embedded software domain.
+ [[file:fsharp.org][F#]]
+ Haskell
+ [[file:julia.org][Julia]] ([[https://julialang.org/][Website]], [[https://github.com/JuliaLang/julia][GitHub]]) is a high-level, dynamic programming language focused on
  high-performance numerical analysis and computational science. It has a type
  system with parametric polymorphism, a fully dynamic programming language, and
  multiple dispatch as its core programming paradigm. It allows concurrent,
  parallel and distributed computing, and direct calling of C and Fortran
  libraries without glue code.
+ [[file:ruby.org][Ruby]]
+ Rust

** Fringe

+ [[http://www.alorelang.org/][Alore]] is a Python-like programming lanugage created by Jukka Lehtosalo that
  explores optional typing.
+ [[https://github.com/alpaca-lang/alpaca][Alpaca]] is a statically typed, strict/eagerly evaluated, functional programming
  language for BEAM (the Erlang VM) inspired by ML and formerly known as
  ML-flavoured Erlang (MLFE).
+ [[https://astrolang.org][Astro]] ([[https://github.com/astrolang/astro][repository]]) is a programming language designed for safe high-performance
  applications. It is a statically-typed systems language that facilitates rapid
  prototyping, features high-level abstractions with zero overhead, ensures
  memory safety without a (tracing) Garbage Collector, and supports
  data-race-free concurrency.
+ [[http://www.ats-lang.org/][ATS]] is a statically typed programming language that unifies implementation
  with formal specification. It is equipped with an expressive type system
  rooted in the framework Applied Type System, which gives the language its
  name. In particular, both dependent types and linear types are available.
+ [[https://ballerina.io/][Ballerina]] ([[https://github.com/ballerina-platform/ballerina-lang][repository]]) is a programming language that introduces abstractions of client
  objects, services, resource functions, and listeners to bring networking into
  the language. It has statically-typed, structural type system.
+ [[https://www.seas.upenn.edu/~harmony/][Boomerang]] is a programming language for writing lenses—well-behaved
  bidirectional transformations—that operate on ad-hoc, textual data formats.
+ [[http://c2lang.org/][C2]] ([[https://github.com/c2lang/c2compiler][repository]]) is a programming language strongly based on C. It is based on LLVM 7.0 and
  some parts of Clang 7.0
+ [[http://cell-lang.net/][Cell]] is a high-level, domain-specific, embeddable programming language
  designed to implement general classes of software systems that are difficult
  to implement using conventional languages.
+ [[https://chapel-lang.org/][Chapel]] ([[https://github.com/chapel-lang/chapel][repository]]) is a modern programming language designed for productive parallel
  computing at scale. Chapel's design and implementation have been undertaken
  with portability in mind, permitting Chapel to run on multicore desktops and
  laptops, commodity clusters, and the cloud, in addition to the high-end
  supercomputers for which it was originally undertaken. + Elm
+ [[http://ciao-lang.org/][Ciao]] ([[https://github.com/ciao-lang/ciao][repository]]) is a programming language that builds up from a logic-based simple
  kernel, and is designed to be extensible and modular.
+ [[file:carp.org][Carp]] ([[https://github.com/carp-lang/Carp][Source]]) is a statically typed [[file:lisp.org][Lisp]], without a garbage collector and virtual
  machine. It provides inferred types.
+ [[file:cloe.org][Cloe]] ([[https://cloe-lang.org/][Webiste]], [[https://github.com/cloe-lang/cloe][Source]]) is a Lisp-like, functional programming language. It provides immutable
  data, lazy evaluation along with implicit parallelism, concurrency, and
  reactiveness.
+ [[https://crystal-lang.org/][Crystal]] ([[https://github.com/crystal-lang/crystal][GitHub]]) is a Ruby-like, object-oriented, statically type-checked programming language.
+ Dafny ([[https://github.com/dafny-lang/dafny][GitHub]]) is a programming language with a program verifier. As you type in your
  program, the verifier constantly looks over your shoulders and flags any
  errors.
+ [[file:darklang.org][Dark Lang]] ([[https://darklang.com/][Website]]) aims to provide the quick prototyping of Python using their built-in
  editor along with a language that comes with static types (similar to OCaml).
+ [[http://www.eff-lang.org/][Eff]] ([[https://github.com/matijapretnar/eff/][GitHub]]) is a functional programming language based on algebraic effect
  handlers. This means that Eff provides handlers of not only exceptions, but of
  any computational effect, allowing you to redirect output, wrap state
  modifications in transactions, schedule asynchronous threads, and much much
  more.
+ [[https://fennel-lang.org/][Fennel]] ([[https://github.com/bakpakin/Fennel][GitHub]]) is a programming language that brings together the speed,
  simplicity, and reach of Lua with the flexibility of a Lisp syntax and macro
  system.
+ [[https://flix.dev/#/][Flix]] ([[https://github.com/flix/flix][GitHub]]) is a functional programming language that takes inspiration from F#, Go,
  OCaml, Haskell, Rust, and Scala. It visually resembles Scala, but its type
  system is closer to that of OCaml and Haskell. Its concurrency model is
  inspired by Go-style processes and channels. Flix compiles to JVM bytecode and
  runs on the Java Virtual Machine. Flix supports full tail call elimination
  which means that tail calls (even to other functions) never overflow the
  stack.
+ [[file:guile.org][Guile]] ([[https://www.gnu.org/software/guile/][Website]], [[http://git.savannah.gnu.org/cgit/guile.git][Source]]) is an implementation of the Scheme programming
  language. It is well suited for writing Domain Specific Languages. Guile is
  [[https://en.wikipedia.org/wiki/Homoiconicity][homoiconic]]. It has a powerful object-oriented programming framework and it is
  optimised for immutability.
+ [[https://www.idris-lang.org/][Idris]] ([[https://www.idris-lang.org/][Website]], [[https://github.com/idris-lang/Idris-dev][GitHub]]) is a general purpose pure functional programming language with dependent
  types. Dependent types allow types to be predicated on values, meaning that
  some aspects of a program’s behaviour can be specified precisely in the type.
  It is compiled, with eager evaluation. Its features are influenced by Haskell
  and ML, and include:
+ Imba ([[http://imba.io/][Webiste]], [[https://github.com/imba/imba][GitHub]]) is a programming language for the web that compiles to JavaScript. It is
  inspired by Ruby and Python. Imba treats DOM elements as a first-class
  citizens. These elements are compiled to an inline DOM, which is an order of
  magnitude faster than todays virtual dom implementations.
+ Inko ([[https://inko-lang.org/][Website]], [[https://gitlab.com/inko-lang/inko][GitLab]]) is a gradually-typed, safe, object-oriented programming language for
  writing concurrent programs. By using lightweight isolated processes, data
  race conditions can not occur.
+ Janet ([[https://janet-lang.org/][Website]], [[https://github.com/janet-lang/janet][Source]]) is a functional and imperative programming language. The entire language
  (core library, interpreter, compiler, assembler, PEG) is about 300-500 kB and
  should run on many constrained systems.
+ Joy is a purely functional programming language devised by Manfred Von Thun.
  Whereas all other functional programming languages are based on the
  application of functions to arguments, Joy is based on the composition of
  functions. Every Joy function is unary, taking a stack as argument and
  producing a stack as value.
+ [[file:lisp.org][Lisp]]
+ Nim ([[https://nim-lang.org/][Website]], [[https://github.com/nim-lang/Nim][Source]]) is a statically typed compiled systems programming language. It combines
  successful concepts from mature languages like Python, Ada and Modula.
+ [[file:pony.org][Pony]] ([[https://www.ponylang.io/][Website]], [[https://github.com/ponylang/ponyc][Source]]) is an open-source, object-oriented, actor-model,
  capabilities-secure, high-performance programming language.
+ Pyret ([[https://www.pyret.org/][Website]], [[https://github.com/brownplt/pyret-lang][Source]]) is a programming language designed to serve as an outstanding choice
  for programming education while exploring the confluence of scripting and
  functional programming.
+ [[file:racket.org][Racket]] ([[https://racket-lang.org/][Website]], [[https://github.com/racket/racket][Source]]) is a general-purpose, Lisp programming language as well as the world’s
  first ecosystem for language-oriented programming.
+ [[file:reason.org][Reason]] is a syntax extension and toolchain for OCaml. It provides a syntax
  familiar to JavaScript and transpiles to OCaml.
+ Self ([[http://www.selflanguage.org/][Website]]) is a prototype-based dynamic object-oriented programming language,
  environment, and virtual machine centered around the principles of simplicity,
  uniformity, concreteness, and liveness.
+ [[file:shen.org][Shen]] ([[http://www.shenlanguage.org/][Website]]) is a Lisp flavour with the type system. It is a functional programming
  language that comes with pattern matching, static type checking and optional
  lazy evaluation. It also provides a Prolog.
+ Wren ([[http://wren.io/][Website]], [[https://github.com/wren-lang/wren][Source]]) is a small, fast, class-based concurrent scripting language. Think
  Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a
  familiar, modern syntax.
+ Yeti ([[http://mth.github.io/yeti/][Website]], [[https://github.com/mth/yeti][Source]]) is ML style functional programming language, that runs on the JVM.


** Applicative Programming Languages

In applicative programming languages, the central construct is a function
invocation. This function is applied to a set of parameters.

** Stack Programming Languages

In stack programming languages, any function invocation is done by using just
the name of that function. Its parameters are implicit, they must on the stack
when a particular function is invoked. The result of the function invocation is
placed on the stack as well.

** Concatenative Programming Languages

In concatenative programming languages, computations are done by composing
functions that operate on data being passed from one function to another one.

Concatenative programming languages are not necessarily stack languages.

*** Examples of Concatenative Programming Languages

+ Kitten
+ Forth
+ Joy
+ Lviv

*** Resources

+ [[http://www.nsl.com/papers/interview.htm][A Conversation with Manfred von Thun]]
+ [[https://hypercubed.github.io/joy/html/faq.html][Frequently Asked Questions about Joy]]
+ [[http://www.kevinalbrecht.com/code/joy-mirror/j02maf.html][Mathematical foundations of Joy]]
