#+TITLE: Lisp
#+ABSTRACT: Lisp is a family of computer programming languages with a distinctive, fully parenthesized prefix notation.

* Lisp

Scheme and Clojure are Lisp-1 which means that both variables and functions names
are in the same namespace.

Common Lisp is Lisp-2 which means that functions and variables have different
namespaces.

Lisp has lexical scoping and dynamic scoping.

** Binding

A binding made by ~let~ lasts until the end of the ~let~ form.

#+BEGIN_SRC elisp
(let ((a 1))
  (let ((a 2))
    (let ((a 3))
      (print a)) ;; 3
    (print a))   ;; 2
  (print a))     ;; 1
#+END_SRC

Function calls create bindings for their formal arguments when they are called:

#+BEGIN_SRC elisp
(defun foo (a)
  (let ((a 2)) (print a))  ;; 2
  (print a))               ;; 1
(foo 1)
#+END_SRC

A binding made by a function call lasts until the call returns.

A ~let~ expression can be seen as syntactic sugar for the lambda form:

#+BEGIN_SRC elisp
(let ((a 1)
      (b 3))
  (+ a b))
#+END_SRC

is equivalent to

#+BEGIN_SRC elisp
((lambda (a b) (+ a b)) 1 3)
#+END_SRC

#+BEGIN_SRC elisp
(let ((to_add 4))
  ((lambda (arg) (+ to_add arg)) 5))
#+END_SRC

#+RESULTS:
: 9
